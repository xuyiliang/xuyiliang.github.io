<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xuyiliang.github.io/</id>
    <title>YiLiang_blog</title>
    <updated>2020-05-03T17:02:05.964Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xuyiliang.github.io/"/>
    <link rel="self" href="https://xuyiliang.github.io/atom.xml"/>
    <subtitle>Record Life</subtitle>
    <logo>https://xuyiliang.github.io/images/avatar.png</logo>
    <icon>https://xuyiliang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, YiLiang_blog</rights>
    <entry>
        <title type="html"><![CDATA[每日一题 第125题——验证文字串]]></title>
        <id>https://xuyiliang.github.io/post/mei-ri-yi-ti-di-125-ti-yan-zheng-wen-zi-chuan/</id>
        <link href="https://xuyiliang.github.io/post/mei-ri-yi-ti-di-125-ti-yan-zheng-wen-zi-chuan/">
        </link>
        <updated>2020-05-03T16:22:52.000Z</updated>
        <content type="html"><![CDATA[<p>题目说明：给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。<br>
示例：<br>
输入: &quot;A man, a plan, a canal: Panama&quot;<br>
输出: true<br>
大家非常熟悉的验证回文串，最直接的思路就是双指针，左右往中间比较，根据题目只判断数字和字母，那么可以先把字符串全部大写或小写，方便比较，代码如下：(5ms)</p>
<pre><code>class Solution {
    public boolean isPalindrome(String s) {
        if(s==null || s.length()==0) return true;
        s = s.toUpperCase();
        int l = 0;
        int r = s.length()-1;
        while(l&lt;r){
            if(!(s.charAt(l)&gt;='0'&amp;&amp;s.charAt(l)&lt;='9' || s.charAt(l)&gt;='a'&amp;&amp;s.charAt(l)&lt;='z' || s.charAt(l)&gt;='A'&amp;&amp;s.charAt(l)&lt;='Z')){
                l++;
                continue;
            }
            if(!(s.charAt(r)&gt;='0'&amp;&amp;s.charAt(r)&lt;='9' || s.charAt(r)&gt;='a'&amp;&amp;s.charAt(r)&lt;='z' || s.charAt(r)&gt;='A'&amp;&amp;s.charAt(r)&lt;='Z')){
                r--;
                continue;
            }
            if(s.charAt(l)!=s.charAt(r)){
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
}
</code></pre>
<p>这样可以通过用例，但是时间有点慢，原因在于大小写的转换需要一定时间，那么优化思路可以是，不需要去转换，在判断是字母的时候，可以通过左右两个char型字符相减的数值与(‘a’-'A')以及（‘A’-'a'）比较得到是不是同一个字母，代码如下：(1ms)</p>
<pre><code>class Solution {
    public boolean isPalindrome(String s) {
        if(s==null || s.length()==0) return true;
        int l = 0;
        int r = s.length()-1;
        while(l&lt;r){
            char left = s.charAt(l);
            char right = s.charAt(r);
            if(!(isNum(left)||isWord(left))){
                l++;
                continue;
            }
            if(!(isNum(right)||isWord(right))){
                r--;
                continue;
            }
            if(left==right){
                l++;
                r--;
            }else if(isWord(left)&amp;&amp;isWord(right)){
                return left-right==('a'-'A')||left-right==('A'-'a');
            }else{
                return false;
            }
        }
        return true;
    }
    public boolean isNum(char c){
        return (c&gt;='0'&amp;&amp;c&lt;='9');
    }
    public boolean isWord(char c){
        return (c&gt;='a'&amp;&amp;c&lt;='z')||(c&gt;='A'&amp;&amp;c&lt;='Z');
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[问题：给定a、b两个文件，各存放50亿个url，每个url各占用64字节，内存限制是4G，如何找出a、b文件共同的url？]]></title>
        <id>https://xuyiliang.github.io/post/wen-ti-gei-ding-ab-liang-ge-wen-jian-ge-cun-fang-50-yi-ge-urlmei-ge-url-ge-zhan-yong-64-zi-jie-nei-cun-xian-zhi-shi-4gru-he-zhao-chu-ab-wen-jian-gong-tong-de-url/</id>
        <link href="https://xuyiliang.github.io/post/wen-ti-gei-ding-ab-liang-ge-wen-jian-ge-cun-fang-50-yi-ge-urlmei-ge-url-ge-zhan-yong-64-zi-jie-nei-cun-xian-zhi-shi-4gru-he-zhao-chu-ab-wen-jian-gong-tong-de-url/">
        </link>
        <updated>2020-04-29T07:25:49.000Z</updated>
        <content type="html"><![CDATA[<p>毫无疑问还是采用分而治之的思想：</p>
<p>1.  遍历文件a，对每个url求取hash(url)%1000，然后根据所得值将url分别存储到1000个小文件（设为a0,a1,...a999）当中；</p>
<p>遍历文件b，对每个url求取hash(url)%1000，然后根据所得值将url分别存储到1000个小文件（设为b0,b1,...b999）当中；</p>
<p>这样处理后，所有可能相同的url都在对应的小文件(a0-b0, a1-b1....a999-b999)当中，不对应的小文件（比如a0-b99）不可能有相同的url。</p>
<p>2.  统计1000对文件中相同的url，采用hash_set.</p>
<p>比如对a0-b0，遍历a0，将其中的url存储到hash_set当中；</p>
<p>然后遍历b0，如果url在hash_map中，则说明此url在a和b中同时存在，保存到文件中即可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[遍历n个元素等概率随机取出其中之一元素]]></title>
        <id>https://xuyiliang.github.io/post/bian-li-n-ge-yuan-su-deng-gai-lu-sui-ji-qu-chu-qi-zhong-zhi-yi-yuan-su/</id>
        <link href="https://xuyiliang.github.io/post/bian-li-n-ge-yuan-su-deng-gai-lu-sui-ji-qu-chu-qi-zhong-zhi-yi-yuan-su/">
        </link>
        <updated>2020-04-29T06:55:02.000Z</updated>
        <content type="html"><![CDATA[<p>问题描述：<br>
一个文件中含有n个元素，只能遍历一遍，要求等概率随机取出其中之一。<br>
策略：<br>
顺序遍历，当前遍历的元素为第L个元素，变量e表示之前选取了某一个元素，此时生成一个随机数r，如果r%L==0,我们将e的值替换为当前值，否则扫描下一个元素直到文件结束。<br>
证明：<br>
在遍历到第1个元素时，取L为1，那么r%L必然为0，所以e为第一个元素，p=100%,<br>
遍历到第2个元素时，L为2，r%L的概率为1/2，这个时候，第1个元素不被替换的概率为1*（1-1/2）=1/2<br>
遍历到第3个元素时，L为3，r%L的概率为1/3，这个时候，前面被选中的元素不被替换的概率为1/2*（1-1/3）=1/3<br>
归纳法证明，这样走到第L个元素时，这L个元素中任一被选中的概率都是1/L，那么走到L+1时，第L+1个元素选中的概率为1/(L+1), 之前选中的元素不被替换，即继续被选中的概率为1/L X ( 1-1/(L+1) ) = 1/(L+1)。证毕。<br>
伪代码如下：</p>
<pre><code>Element RandomPick(file):

Int length = 1;

While( length &lt;= file.size )

   If( rand() % length == 0)

        Picked = File[length];

   Length++;

Return picked
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日一题 leetcode 17.01.不用加号的加法]]></title>
        <id>https://xuyiliang.github.io/post/bu-yong-jia-hao-de-jia-fa/</id>
        <link href="https://xuyiliang.github.io/post/bu-yong-jia-hao-de-jia-fa/">
        </link>
        <updated>2020-04-22T05:37:41.000Z</updated>
        <content type="html"><![CDATA[<p>设计一个函数把两个数字相加。不得使用 + 或者其他算术运算符。</p>
<p>示例:<br>
输入: a = 1, b = 1<br>
输出: 2</p>
<p>这道题是简单题，不过得了解一些异或操作才能做出来。<br>
思路就是用^存放值，&amp;和&lt;&lt;进位</p>
<pre><code>class Solution {
    public int add(int a, int b) {
        int sum = 0;
        int carry = 0;
        while(b!=0){
            sum = a ^ b;
            carry = (a &amp; b)&lt;&lt;1;
            a = sum;
            b = carry;
        }
        return a;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日一题 leetcode11 装最多水的容器]]></title>
        <id>https://xuyiliang.github.io/post/mei-ri-yi-ti-leetcode11-zhuang-zui-duo-shui-de-rong-qi/</id>
        <link href="https://xuyiliang.github.io/post/mei-ri-yi-ti-leetcode11-zhuang-zui-duo-shui-de-rong-qi/">
        </link>
        <updated>2020-04-17T17:02:52.000Z</updated>
        <content type="html"><![CDATA[<p>直接放题目，这道题应该就比较熟悉了</p>
<pre><code>给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直
线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

说明：你不能倾斜容器，且 n 的值至少为 2。
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="img" loading="lazy"></figure>
<p>首先先明白题意，就是给一个数组，数组中的数字代表着柱子的高度，然后需要找到两根柱子，他们之间能装的水最多，返回水量。</p>
<p>那么<strong>水量=两根柱子较短的那根*两根柱子之间的距离</strong></p>
<p>明白这个之后，就可以做题了</p>
<p>这道题的话采用双指针+贪心，设定<strong>left=0,right=height.length-1</strong>,然后用一个数来存放结果，那么柱子left和right如何变化呢？</p>
<p>如果<strong>height[left]&lt;height[right]</strong>,那么<strong>left++</strong>，反之则<strong>right++</strong>，因为水能够存放多少是由短的那个柱子决定的，就是所谓的木桶短板效应了。</p>
<p>直接贴代码</p>
<pre><code class="language-java">class Solution {
    public static int maxArea(int[] height) {
        if(height.length==0 || height.length==1){
            return 0;
        }
        int max = 0;
        int left = 0;
        int right = height.length-1;
        while(left&lt;right){
            int cur = Math.min(height[left],height[right])*(right-left);
            max = cur&gt;max?cur:max;
            if(height[left]&lt;height[right]){
                left++;
            }else{
                right--;
            }
        }
        return max;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日一题 leetcode69.x的平方根]]></title>
        <id>https://xuyiliang.github.io/post/mei-ri-yi-ti-leetcode69x-de-ping-fang-gen/</id>
        <link href="https://xuyiliang.github.io/post/mei-ri-yi-ti-leetcode69x-de-ping-fang-gen/">
        </link>
        <updated>2020-04-17T16:38:17.000Z</updated>
        <content type="html"><![CDATA[<p>今天开始更新做数据结构算法题的感想与收获吧！</p>
<pre><code>题目：
实现 int sqrt(int x) 函数。

计算并返回 x 的平方根，其中 x 是非负整数。

由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。
</code></pre>
<p>这道题就是让我们自己实现Math.sqrt()函数，一拿到，有没有想直接调个函数，返回，但是不可取哦，真的面试可不能这样。</p>
<p>说一下拿到这道题的思路，一开始我是想着，输入一个数x，那就用for循环从i=0到i=x/2+1进行判断，然后如果***i的平方&lt;=x &amp;&amp; (i+1)的平方&gt;=x***那就说明找到了；但是这个想法有两个问题，第一个是时间太久了，第二个是，i的平方有可能int装不下，那么此时想到把判断***i的平方&lt;=x***转化成***i&lt;=x/i ***这样就不用去管会不会超出范围了。</p>
<p>那时间太久呢？采用二分法，由于x是Int，所以最大2147483647开平方46340.95，所以只要在0~46341间做判断就行了。代码如下</p>
<pre><code class="language-java">class Solution {
    public static int mySqrt(int x) {
        int res = 0;
        if(x==0)
            return res;
        int left = 0;
        int right = 46341;
        while(left&lt;right){
            int mid = left + (right - left)/2;
            if(x/mid&gt;=mid &amp;&amp; x/(mid+1)&lt;=(mid+1)){
                if(x/(mid+1)==(mid+1)){
                    return mid+1;
                }else{
                    return mid;
                }
            }else if((mid+1)&lt;x/(mid+1)){
                left = mid+1;
            }else{
                right = mid;
            }
        }
        return res;
    }
}
</code></pre>
]]></content>
    </entry>
</feed>